#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Aug 22 11:20:11 2021

@author: colibri

This script generates .npy files for the test generative.py. Each .npy file
is a data batch that has been generated by an hmm. In that way, a dataloader
can load the batches very easily with just np.load.
"""

import numpy as np

from context import hmm


frame_dim = 2
seq_length = 10
batch_size = 64
n_train_batches = 2000
n_validation_batches = n_train_batches // 5  # ratio validaton-train 1:5 

folder2save = 'hmm_batches/' 

gauss_hmm = hmm.GaussianHmm(frame_dim)

for i in range(n_train_batches):
    train_batch = gauss_hmm.sample_sequences(seq_length, batch_size)
    train_batch_filename = "".join([folder2save, str(batch_size), '_train', 
                                    str(i), '.npy']) 
    np.save(train_batch_filename, train_batch)
    
for i in range(n_validation_batches):
    val_batch = gauss_hmm.sample_sequences(seq_length, batch_size)
    val_batch_filename = "".join([folder2save, str(batch_size), '_val', 
                                    str(i), '.npy']) 
    np.save(val_batch_filename, val_batch)

expected_frames = np.zeros((seq_length, frame_dim))
for frame_instant in range(seq_length):
    expected_frames[frame_instant] = gauss_hmm.emission_expected_value(frame_instant)

np.save(folder2save + 'expected_value_frames', expected_frames)
print("theoretical expected values:")
print(expected_frames)
print()

# to check that the calculation is correct, we do some gibbs sampling and 
# compare the means with the theoretical result
sampled_sequences = gauss_hmm.sample_sequences(seq_length, 10_000)
approx_expected_frames = np.mean(sampled_sequences, axis=1)
print("mean of the sampled frames:\n")
print(approx_expected_frames)
